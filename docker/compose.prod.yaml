# Creates HORIZON Docker STACK
name: "horizon"
services:
  postgres:
    image: "postgres:16-alpine"
    container_name: "horizon_postgres"
    restart: always
    ports:
      - "5432:5432"
    networks:
      - horizon_network
    volumes:
      - ${POSTGRES_DATA:?required}:/var/lib/postgresql/data
    environment:
      TZ: "Europe/Bratislava"
      PGTZ: "Europe/Bratislava"
      POSTGRES_USER: ${POSTGRES_USER:?required}
      POSTGRES_PASSWORD: ${POSTGRES_PASS?:required}
      POSTGRES_DB: horizon
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 10
  spring:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    image: "horizon/spring-backend"
    container_name: "horizon_backend"
    restart: unless-stopped
    ports:
      - "${PORT}:8080"
    networks:
      - horizon_network
    depends_on:
      - postgres
    environment:
      HOR_LOCALE: "sk_SK"
      HOR_TIMEZONE: "Europe/Bratislava"
      HOR_HOSTNAME: ${HOR_HOSTNAME:?required}
      HOR_JWT_SECRET: ${HOR_JWT_SECRET:?required}
      HOR_JWT_KEY: ${HOR_JWT_KEY:?required}
      HOR_ADMIN_USERNAME: ${HOR_ADMIN_USERNAME:?required}
      HOR_ADMIN_PASSWORD: ${HOR_ADMIN_PASSWORD:?required}
      MAIL_HOST: ${MAIL_HOST:?required}
      MAIL_PORT: ${MAIL_PORT:-465}
      MAIL_USERNAME: ${MAIL_USERNAME:?required}
      MAIL_PASSWORD: ${MAIL_PASSWORD:?required}
      DATASOURCE_JDBC: "jdbc:postgresql://horizon_postgres:5432/horizon"
      DATASOURCE_USER: ${POSTGRES_USER}
      DATASOURCE_PASS: ${POSTGRES_PASS}
      CORS_ORIGINS: ${CORS_ORIGINS:?required}
      CORS_HEADERS: ${CORS_HEADERS:?required}
networks:
  horizon_network:
    name: horizon_network
    external: true